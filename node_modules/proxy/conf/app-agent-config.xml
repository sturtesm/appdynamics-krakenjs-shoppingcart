<?xml version="1.0"?>
<app-agent-configuration>
  <configuration-properties>
    <property name="agent-overwrite" value="false"/>
    <!--property name="test-mode" value="false"/-->
    <!-- enable agent debugger value eg: localhost:61616 -->
    <property name="enable-agent-debugger" value="false"/>
    <!-- "true" : "false" (default)
        <property name="gomez-script" value="false"/-->
    <!-- comma separated strings, startsWith -->
    <!--property name="gomez-bts" value=""/>   -->
    <!--property name="thread-sampler" value="true"/ -->
    <!-- defines the interval in seconds for the agent to poll for new configuration from the controller. needs a restart -->
    <!-- property name="config-poll-interval" value="60"/ -->
    <!-- enables/disables the agent. TransactionEntryPoints will not be monitored. No new bt and metrics will be registered;
        metrics, snpshots will not be reported; The background threads will not be stopped and once this is turned back on
        monitoring is active immediately. Does not need a restart -->
    <!-- property name="hotDisable-agent" value="true"/ -->
    <!-- uncomment to hotDisable agent config data request to controller. Can be reactivated by setting to true or commenting it, does not need a restart -->
    <!-- property name="config-data-request" value="false" / -->
    <!-- uncomment to hotDisable metric data request to controller. Unregistered metrics will be registered on reactivation.
        Can be reactivated by setting to true or commenting it, does not need a restart -->
    <!-- property name="metric-data-request" value="false" / -->
    <!-- uncomment to hotDisable metric data aggregation at agent. Can be reactivated by setting to true or commenting it, does not need a restart -->
    <!-- property name="metric-data-aggregation" value="false" /-->
    <!-- uncomment this to enable timing stats for agent and controller rest communication. does not need a restart -->
    <!-- property name="rest-stats-tracking-enabled" value="true" /-->
    <!-- set requency for printing rest stats, default value is 60. does not need a restart -->
    <!-- property name="rest-stats-tracking-frequency-in-seconds" value="60" / -->
  </configuration-properties>
  <agent-services>
    <agent-service name="DynamicServiceManager" implementation-class-name="com.singularity.ee.agent.appagent.kernel.DynamicServiceManager" enabled="true">
      <implementation-class-name>
                com.singularity.ee.agent.appagent.kernel.DynamicServiceManager
            </implementation-class-name>
      <configuration-properties>
        <property name="external-service-directory" value="external-services"/>
      </configuration-properties>
    </agent-service>
    <agent-service name="BCIEngine" enabled="true">
      <optional-service-dependencies>Agent16Service</optional-service-dependencies>
      <configuration-properties>
        <!-- uncomment this and to enable timing stats for interceptors. does not need a restart -->
        <!-- property name="interceptor-stats-tracking-enabled" value="true"/ -->
        <!-- uncomment this to log where a specified interceptor is being called from periodically. does not need a restart -->
        <!-- property name="interceptor-call-tracing" value="com.foo.AInterceptor/60,com.foo.BInterceptor/60"/-->
        <!-- uncomment this to 'remove in runtime' / 'do not add during startup' the class file tranformer. does not need a restart -->
        <!-- property name="unregister-classfile-transformer" value="true" / -->
        <!-- uncomment this to 'not register class file transformer for retransformation' in java 1.6. Needs a restart -->
        <!-- property name="register-for-retransform" value="true" / -->
        <!-- uncomment this to hotDisable class file tranformation. does not need a restart -->
        <!-- property name="hotDisable-classfile-transformer" value="true" / -->
        <!-- set this property to true to enable JSON Interceptor rules, default value is true -->
        <!--property name="enable-json-bci-rules" value="true"/-->
        <!-- set this property to true to enable XML Parser and Java XML Binding Interceptor rules, default value is true -->
        <!--property name="enable-xml-bci-rules" value="true"/-->
        <!-- set this property to true to enable Mule Interceptor rules, default value is false -->
        <!--property name="enable-mule-bci-rules" value="false"/-->
      </configuration-properties>
      <configuration>
        <!-- disabling this disables the whole exclude process. everything is processed. -->
        <bci-processing-excludes>
          <override-system-exclude filter-type="EQUALS" filter-value="foo"/>
          <custom-exclude filter-type="EQUALS" filter-value="foo"/>
          <custom-exclude filter-type="CONTAINS" filter-value="$$EnhancerByCGLIB$$"/>
          <custom-exclude filter-type="EQUALS" filter-value="org.jboss.resource.adapter.jms.JmsMessageConsumer"/>
          <custom-exclude filter-type="EQUALS" filter-value="com.ibm.ejs.jms.JMSMessageConsumerHandle"/>
        </bci-processing-excludes>
      </configuration>
    </agent-service>
    <agent-service name="SnapshotService" enabled="true">
      <service-dependencies>BCIEngine</service-dependencies>
      <configuration-properties>
        <!-- uncomment this property to hotDisable/enable the startup sampling for snapshots which will mean snapshots will be collected for all BTs for
                the first 15 minutes of an application server start.-->
        <property name="enable-startup-snapshot-policy" value="true"/>
        <!-- uncomment this and save the file to collect snapshots for all business transactions executed in this node. does not need a restart -->
        <property name="on-demand-snapshots" value="true"/>
        <!-- uncomment this to use a samling rate for call graphs only for this node. The global configuration will be ignored if this is used. does not need a restart -->
        <!-- property name="callgraph-granularity-in-ms" value="10"/ -->
        <!-- uncomment this to show these packages in the call graph in addition to the ones configured in the UI. does not need a restart -->
        <!-- property name="show-packages" value="com.foo.*,com.foo.bar.*"/ -->
        <!-- uncomment this to show these packages in the call graph in addition to the ones configured in the UI. does not need a restart  -->
        <!-- property name="dont-show-packages" value=value="com.foo.*,com.foo.bar.*"/ -->
        <!-- uncomment this and add a comma separated list of 'classname/method name' that report a looped execution so that their executions are shown in the call graph.
                                                                    this property needs a restart  -->
        <!-- property name="loop-reporting-methods" value="com.foo.Bar1/loop,com.foo.Bar2/loop1"/ -->
        <!-- Maximum number of concurrent snapshots that are allowed including continuing transactions -->
        <!--property name="max-concurrent-snapshots" value="50" /-->
        <!-- Maximum number of snapshots allowed in a 1-minute interval including continuing transactions -->
        <!--property name="max-snapshots-per-minute" value="200" /-->
        <!-- Maximum number of concurrent snapshots that are allowed excluding continuing transactions -->
        <!--property name="max-originating-concurrent-snapshots" value="5" /-->
        <!-- Maximum number of snapshots allowed in a 1-minute interval excluding continuing transactions -->
        <!--property name="max-originating-snapshots-per-minute" value="20" /-->
        <!-- Maximum number of exit calls allowed in a snapshot. Calls after the max limit will not be recorded -->
        <!--property name="max-jdbc-calls-per-snapshot" value="500" /-->
        <!-- Maximum number of exit-call call stack samples in a callgraph -->
        <!--property name="max-jdbc-calls-per-callgraph" value="100" /-->
        <!-- Maximum sample queue length of unprocessed samples for a callgraph -->
        <!--property name="max-callsample-queue-length" value="100" /-->
        <!-- Minimum exit call duration for which a call stack sample will be collected-->
        <property name="min-duration-for-jdbc-in-ms" value="0"/>
        <property name="min-duration-for-exit-call-save-in-ms" value="0"/>
        <property name="max-batch-sqls-per-snapshot" value="2"/>
        <property name="max-jdbc-calls-per-snapshot" value="4"/>
        <!-- // Maximum limit on compressed snapshot data (in Kbytes) in snapshot reporter queue -->
        <!--property name="max-snapshot-reporter-queue-size-kb" value="500" /-->
        <!-- Thread pool size for Callstack sample collwction -->
        <!--property name="callsample-threadpool-size" value="2" /-->
        <!-- Thread pool size for Callstack sample processing -->
        <!--property name="callsample-processor-threadpool-size" value="5" /-->
        <!-- Interval in milliseconds at which Callstack sample processor checks for new samples in the queue -->
        <!--property name="callsample-processor-interval" value="20" /-->
        <!-- uncomment to hotDisable sanpshot data requests to controller. Can be reactivated by setting to true or commenting it, does not need a restart -->
        <!--property name="snapshot-data-request" value="false" /-->
        <!-- uncomment to enable adaptive call sampling. Sampling frequency based on Average Response time for the business transaction in last 1 minute.
                The following distribution is used. 10ms for <= 10 seconds; 50 ms for 10 to 60 secs; 100 ms for 60 to 600 secs; 200ms for > 600 seconds -->
        <!--property name="adaptive-callgraph-granularity" value="true" /-->
      </configuration-properties>
    </agent-service>
    <agent-service name="TransactionMonitoringService" enabled="true">
      <service-dependencies>BCIEngine,SnapshotService</service-dependencies>
      <configuration-properties>
        <!--uncomment this to hotDisable transaction correlation -->
        <!--property name="enable-transaction-correlation" value="false"/-->
        <!-- enables transaction correlation through web service tiers, uncomment to disable -->
        <!--property name="enable-soap-header-correlation" value="false"/-->
        <!-- enables us to have multiple config files. -->
        <property name="config-file-path" value="transactions.xml"/>
        <property name="service-endpoint-config-file-path" value="service-endpoints.xml"/>
        <!--uncomment and edit this tag to hotDisable exit call monitoring for a specific type. This would mean that average data for that specific call type will not
                 be collected.i.e.Calls Per Min/Avg Response Time etc for exit calls. However on a snapshot you would continue to get the same information as before.
                 Do this if you make a large number of exit calls per transaction to reduce instrumentation overhead and not affecting the richness of the diagnostic information.-->
        <!-- property name="hotDisable-exit-call-metrics-for" value="JDBC,HTTP,WEB_SERVICE,JMS"/ -->
        <!-- uncomment and edit this tag to hotDisable exit call correlation for various exit call types-->
        <!-- property name="hotDisable-exit-call-correlation-for" value="HTTP,JMS,RMI"/ -->
        <!-- uncomment this property and edit it[default is 250] to increase/decrease the number of business transactions discovered once an agent is started.
                this is done to prevent business transaction metric explosion as an unsuitable discovery scheme can potentially produce thousands of transactions. -->
        <!-- property name="max-business-transactions" value="250"/ -->
        <!-- uncomment to hotDisable bt data requests to controller. Unregistsred bts will be registered on reactivation.
                Can be reactivated by setting to true or commenting it, does not need a restart -->
        <!--property name="bt-data-request" value="false" /-->
        <!-- edit the jdbc properties here to add support for unsupported JDBC driver classes. , requires a server re-start-->
        <!-- property name="jdbc-statements" value=""/ -->
        <!-- property name="jdbc-connections" value=""/ -->
        <!-- property name="jdbc-prepared-statements" value=""/ -->
        <!-- property name="jdbc-callable-statements" value=""/ -->
        <!-- uncomment the following to enable transaction correlation for jms .receive() call, default value is false -->
        <!-- property name="enable-jms-receive-correlation" value="true"/ -->
        <property name="capture-raw-sql" value="true"/>
        <!-- timeout value in seconds for global transactions initiated by appdynamics api.
                The endTransaction api will be invoked after the specified timeout period. Default value is 15 seconds -->
        <!--property name="api-transaction-timeout-in-seconds" value="15" /-->
        <!-- timeout value in seconds for threads participating in a global transaction added by appdynamics api.
                The removeCurrentThread api will be invoked after the specified timeout period. Default value is 10 seconds -->
        <!--property name="api-thread-activity-timeout-in-seconds" value="10" /-->
        <!-- Disable/enable automatic HTTP error code reporting for error codes between 400 - 505, default TRUE. -->
        <!--property name="enable-default-http-error-code-reporter" value="true" /-->
        <!--
                Add comma seperated list of class or interface names. The classes which extend or implement these interfaces
                will be excluded from being detected as session beans
                -->
        <!--property name="ejb2-exclude-extending-classes" value=""/-->
        <!--
                Add comma seperated list of class names. These will be excluded from being detected as session beans
                -->
        <!--property name="ejb2-exclude-class-names" value=""/-->
        <!-- 
                Add comma-separated list of async environment names.  These will be used to enable async transaction detection
                for supported environments.  Current supported async environments: mule,camel,jbossesb,tibcobw,scala
                 -->
        <!--  property name="enable-async-correlation-for" value="mule,camel,jbossesb,tibcobw,scala"/ -->
        <!--
                Cassandra CQL / Datastax driver: uncomment to name Cassandra backends with IP/port instead of naming
                with cluster name.  In any case the IP/port info goes into snapshot details. 
                 -->
        <!--  property name="enable-cassandra-backend-ip-naming" value="true" -->
      </configuration-properties>
      <configuration>
        <!--
                <backend-resolvers>
                    <backend-resolver name="Derby - Replica DB" type="JDBC">
                        <match-property name="url" filter-type="contains" filter-value="replica-db"/>
                    </backend-resolver>
                </backend-resolvers>
                -->
        <!--
                match-class
                    type: inherits-from-class, implements-interface, matches-class, has-class-annotation
                    name:
                        filter-type: STARTSWITH, EQUALS, ENDSWITH, CONTAINS
                name-config
                    type:
                        0:none,             1:param,        2:instance,     3:classname,
                        4:simple classname  5:thread id     6:thread name
                    operation:
                        param:      <paramIndex>.getter-chain   eg. 0.getName().toString()
                        instance:   getter-chain                eg. getName().toString()
                -->
        <fork-config>
          <!-- exclude java and org -->
          <excludes filter-type="STARTSWITH" filter-value="com.singularity/"/>
          <excludes filter-type="STARTSWITH" filter-value="java/,javax/,com.sun/,sun/,org/,com/mysql"/>
          <!-- exclude weblogic and websphere -->
          <excludes filter-type="STARTSWITH" filter-value="com.bea/,com.weblogic/,weblogic/,com.ibm/,net/sf/,com/mchange/"/>
          <excludes filter-type="STARTSWITH" filter-value="com.apple.java/"/>
          <excludes filter-type="CONTAINS" filter-value="closure"/>
          <excludes filter-type="CONTAINS" filter-value="Closure"/>
          <excludes filter-type="STARTSWITH" filter-value="com.singularity"/>
          <excludes filter-type="EQUALS" filter-value="com.tibco.pe.core.JobDispatcher$JobCourier"/>
          <excludes filter-type="STARTSWITH" filter-value="com.googlecode/"/>
          <excludes filter-type="STARTSWITH" filter-value="com.google/"/>
          <excludes filter-type="STARTSWITH" filter-value="com.opensymphony/"/>
          <excludes filter-type="STARTSWITH" filter-value="com.datastax.driver.core/"/>
          <!-- Scala/Akka/Play  -->
          <excludes filter-type="STARTSWITH" filter-value="scala.concurrent/"/>
          <excludes filter-type="STARTSWITH" filter-value="akka/"/>
          <excludes filter-type="STARTSWITH" filter-value="play.core.server/"/>
          <excludes filter-type="STARTSWITH" filter-value="play.api.libs.concurrent/"/>
          <excludes filter-type="STARTSWITH" filter-value="com.typesafe/"/>
          <excludes filter-type="STARTSWITH" filter-value="com.jolbox.bonecp/"/>
          <excludes filter-type="STARTSWITH" filter-value="com.avaje.ebeaninternal/"/>
          <excludes filter-type="STARTSWITH" filter-value="com.ning.http/"/>
          <excludes filter-type="STARTSWITH" filter-value="xsbt.boot/"/>
          <excludes filter-type="STARTSWITH" filter-value="sbt"/>
          <excludes filter-type="STARTSWITH" filter-value="groovy.lang/,groovy.util/"/>
          <!-- Netty -->
          <include filter-type="EQUALS" filter-value="org.jboss.netty.handler.execution.ChannelUpstreamEventRunnable"/>
          <excludes filter-type="STARTSWITH" filter-value="com.yammer/"/>
          <!-- atlassian -->
          <excludes filter-type="STARTSWITH" filter-value="com.atlassian.event.internal/,com.atlassian.jira.config.properties/,com.atlassian.jira.project.DefaultProjectManager$,com.atlassian.jira.issue.index.DefaultIssueIndexer$TaskCompleter"/>
          <include filter-type="STARTSWITH" filter-value="org.apache.jsp,org.apache.commons.dbcp/"/>
          <!-- CORE-{15443, 18536, 19236} -->
          <exclude filter-type="STARTSWITH" filter-value="com.tangosol.coherence.component.net/"/>
          <exclude filter-type="STARTSWITH" filter-value="com.tangosol.coherence.component.util.DaemonPool$"/>
          <exclude filter-type="STARTSWITH" filter-value="com.ning.http.client.providers.netty/"/>
          <exclude filter-type="STARTSWITH" filter-value="oracle.jdbc.driver/"/>
          <exclude filter-type="STARTSWITH" filter-value="net.spy.memcached/"/>
          <exclude filter-type="STARTSWITH" filter-value="com.rabbitmq.client.impl/"/>
          <exclude filter-type="STARTSWITH" filter-value="net.jini/"/>
          <exclude filter-type="STARTSWITH" filter-value="com.streambase.ext.org.apache.xmlrpc/"/>
          <exclude filter-type="STARTSWITH" filter-value="com.streambase.sb.client/"/>
          <exclude filter-type="STARTSWITH" filter-value="com.couchbase.client/"/>
          <include filter-type="STARTSWITH" filter-value="org.apache.camel.impl.DefaultProducerTemplate$"/>
          <include filter-type="EQUALS" filter-value="org.jboss.soa.esb.listeners.message.MessageAwareListener$TransactionalRunner"/>
          <!-- SonicMQ -->
          <excludes filter-type="STARTSWITH" filter-value="com.sonicsw/"/>
          <excludes filter-type="STARTSWITH" filter-value="progress/"/>
          <!--
                    <excludes filter-type="STARTSWITH|CONTAINS|ENDSWITH|EQUALS" filter-value="comma seperated list of excludes"/>
                    <exclude filter-type="STARTSWITH|CONTAINS|ENDSWITH|EQUALS" filter-value="name of exclude"/>
                    <include filter-type="STARTSWITH|CONTAINS|ENDSWITH|EQUALS" filter-value="name you want to include - overriding the exclude"/>
                    -->
          <job>
            <match-class type="inherits-from-class">
              <name filter-type="EQUALS" filter-value="java.lang.Thread"/>
            </match-class>
            <match-method>
              <name filter-type="EQUALS" filter-value="run"/>
            </match-method>
            <name-config operation="" type="4"/>
          </job>
          <job>
            <match-class type="implements-interface">
              <name filter-type="EQUALS" filter-value="java.lang.Runnable"/>
            </match-class>
            <match-method>
              <name filter-type="EQUALS" filter-value="run"/>
            </match-method>
            <name-config operation="" type="4"/>
          </job>
          <job>
            <match-class type="implements-interface">
              <name filter-type="EQUALS" filter-value="java.util.concurrent.Callable"/>
            </match-class>
            <match-method>
              <name filter-type="EQUALS" filter-value="call"/>
            </match-method>
            <name-config operation="" type="4"/>
          </job>
          <!-- Netty: the parent of ChannelUpstreamEventRunnable should be excluded, and a sibling class should be excluded, but ChannelUpstreamEventRunnable
                         itself should be included.  The run() method is defined in the parent class, but it just delegates to doRun(), so use the doRun()
                         method in the job definition -->
          <job>
            <match-class type="matches-class">
              <name filter-type="EQUALS" filter-value="org.jboss.netty.handler.execution.ChannelUpstreamEventRunnable"/>
            </match-class>
            <match-method>
              <name filter-type="EQUALS" filter-value="doRun"/>
            </match-method>
            <name-config operation="" type="4"/>
          </job>
        </fork-config>
      </configuration>
    </agent-service>
    <agent-service name="JMXService" enabled="false">
      <configuration-properties>
        <property name="config-file-path" value="jmx-config.xml"/>
        <property name="jmx-mbeanserver-findDelayInMinutes" value="1"/>
        <property name="jmx-gc-minorCollectionBean" value=""/>
        <property name="jmx-gc-majorCollectionBean" value=""/>
        <!-- uncomment to hotDisable jmx data collection at agent. Can be reactivated by setting to true or commenting it, does not need a restart -->
        <!--property name="jmx-data-collection" value="false" /-->
        <!-- Enable / hotDisable the command line jmx shell -->
        <property name="jmx-shell" value="false"/>
        <property name="jmx-use-local-xml-config" value="false"/>
      </configuration-properties>
      <configuration>
        <!--

                Use the below configuration sample to create rules to exclude MBean attributes from MBean Browser.
                <exclude object-name=<MBean name pattern> attributes=< * |comma separated list of attribute names> >

                The example below will exclude all attributes of MBeans that match "Catalina:*".

                <jmx-mbean-browser-excludes>
                    <exclude object-name="Catalina:*" attributes="*"/>
                </jmx-mbean-browser-excludes>

                -->
        <!--
                  Add names of mbeans and attributes that are to be treated as continuosly increasing counters
                -->
        <jmx-mbean-browser-excludes>
          <exclude object-name="Catalina:*" attributes="*"/>
        </jmx-mbean-browser-excludes>
        <jmx-forever-increasing-counters>
          <mbean object-name="Catalina:type=GlobalRequestProcessor,*" attributes="requestCount"/>
        </jmx-forever-increasing-counters>
      </configuration>
    </agent-service>
    <agent-service name="ObjectMonitoringService" enabled="true">
      <service-dependencies>BCIEngine</service-dependencies>
      <configuration-properties>
        <property name="enable-collection-monitoring" value="false"/>
        <property name="enable-object-size-monitoring" value="false"/>
        <property name="enable-instance-monitoring" value="false"/>
        <property name="minimum-age-for-evaluation-in-minutes" value="5"/>
        <property name="collection-capture-period-in-minutes" value="30"/>
        <property name="minimum-size-for-evaluation-in-mb" value="5"/>
        <property name="disable-collection-capture" value="false"/>
        <property name="jmap-histo-option" value="-all"/>
      </configuration-properties>
      <!--
            <configuration>
                <collection-tracking>
                    <map-class-names filter-type="inlist" filter-value="java.util.IdentityHashMap"/>
                    <collection-class-names filter-type="inlist" filter-value="java.util.TreeSet"/>
                </collection-tracking>
            </configuration>
            -->
    </agent-service>
    <agent-service name="AgentDiagnosticsService" enabled="true">
      <service-dependencies>BCIEngine</service-dependencies>
      <configuration-properties>
        <!-- set this to true to enable thread dump on the app server VM. does not need a restart  -->
        <property name="enable-thread-dump" value="false"/>
        <!-- Set the thread dump interval in seconds, default value is 300 -->
        <property name="thread-dump-interval" value="300"/>
        <!-- Dump all threads in the system, default value is true. If set to false will dump only appdynamics threads-->
        <property name="dump-all-threads" value="true"/>
        <!-- Thread dump logger output, can be set to 'log4j' or 'file' logger. If file, the output is written to thread-dump.log,
                default is log4j, log4j file name can be changed through log4j.xml change -->
        <property name="thread-dump-logger" value="log4j"/>
        <!-- Enables shutdown hook for JVM, default is false, uncomment to enable it. The shutdown log file is written
                to logs/jvm-shutdown.log file with Current JVM memory status and dump for all threads.
                Note : For details on when JVM shutdown hook is invoked please refer javadocs of java.lang.Runtime.addShutdownHook(..) -->
        <property name="enable-shutdown-hook" value="false"/>
        <!-- enable / hotDisable memomry monitoring. default value is false, does not need a JVM restart to take effect-->
        <property name="memory-monitoring-enable" value="false"/>
        <!-- interval in minutes at which object size will be computed, default value is 10. does not need a restart -->
        <property name="memory-monitoring-interval-in-minutes" value="10"/>
        <!-- Comma separated list of fully qualified class name and method name(s) that needs to be monitored,
                e.g. com.Foo.MyCache#getMyCache, com.Foo.AnotherCache#getAnotherCache. New definitions can be added without needing to restart.
                 The classe objects identified from return values can be filtered by adding class names to 'memory-monitor-class-filter' property
                 Also static fields are not included in size computation. Use 'memory-monitor-static-fields' to track static objects
                 At Max 25 objects are allowed to be monitored. This is a safety check and can't be changed -->
        <property name="memory-monitor-methods" value=""/>
        <!-- A comma separated list of class names to filter the list of classes that needs to be monitored. e.g. If the
                instrumented method returns 20 different class intances of an ICache interface but only two implementation type
                 needs to be monitored then add them explicitly 'com.foo.ACache, com.foo.BCache' This reduces the overhead on
                 the Memory Calculator. -->
        <property name="memory-monitor-class-filter" value=""/>
        <!-- Comma separated list of fully qualified class name and static field name(s) that needs to be monitored,
                e.g. com.Foo.MyCache#myHashMap, com.Foo.AnotherCache#myOtherHashTable. New definitions can be added without needing to restart
                 At Max 25 field objects are allowed to be monitored. This is a safety check and can't be changed -->
        <property name="memory-monitor-static-fields" value=""/>
        <!-- To compute deep size of an object the object graph is traversed and Objects are pushed and popped to a stack. The
                 max limit on stack size in THOUSANDS. If the limit is reached no new items will be pushed but current items will
                 be popped and sized-->
        <property name="memory-monitor-max-depth" value="500"/>
        <!-- To compute deep size of an object the object graph is traversed. The total number of objects in THOUSANDS that will be traversed
                 If the limit is reached the memory calculator terminates the calculation -->
        <property name="memory-monitor-total-objects" value="500"/>
        <!-- Comma separated list of fully qualified class name and method name(s) whose caller needs to be traced,
                e.g. com.Foo.MyCache#getMyCache, com.Foo.AnotherCache#getAnotherCache. New definitions can be added without needing to restart.
                Traces are sent every minute as an APPLICATION_INFO event viewable on Event viewer. Data will be collected as long as
                'call-tracer-enable' is set to true. It is recommended to set enable-call-tracer to false or delete the call-trace methods
                after necessary data is obtained. -->
        <property name="call-tracer-methods" value=""/>
      </configuration-properties>
    </agent-service>
    <agent-service name="Agent16Service" enabled="true" minimum-java-version="1.6">
      <configuration-properties>
            </configuration-properties>
    </agent-service>
    <!-- Make sure this is the last service all the time in the config file -->
    <agent-service name="AgentProxyService" enabled="true">
      <service-dependencies>TransactionMonitoringService</service-dependencies>
      <configuration-properties>
            </configuration-properties>
    </agent-service>
    <!-- PLEASE ADD SERVICES BEFORE AgentProxyService -->
  </agent-services>
</app-agent-configuration>
